/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 12 20:10:43 GMT 2024
 */

package ir.ramtung.impl2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl2.Book;
import ir.ramtung.impl2.Document;
import ir.ramtung.impl2.Magazine;
import ir.ramtung.impl2.Prof;
import ir.ramtung.impl2.Reference;
import ir.ramtung.impl2.Student;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Prof prof0 = new Prof("/qD\"Gq{");
      prof0.penalty = 44;
      Book book0 = new Book("/qD\"Gq{", 0);
      book0.day = 0;
      prof0.borrow(book0);
      prof0.timePass();
      assertEquals(44, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Student student0 = new Student("", "cant extend");
      Book book0 = new Book("7_=V1~Uz/4(kk0u=r", 0);
      book0.day = 1;
      student0.borrow(book0);
      student0.timePass();
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Student student0 = new Student("", "");
      Reference reference0 = new Reference("", (-745));
      student0.borrow(reference0);
      student0.borrow(reference0);
      student0.timePass();
      assertFalse(student0.canBorrow());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Prof prof0 = new Prof("");
      Reference reference0 = new Reference("", 1625);
      prof0.borrow(reference0);
      prof0.penalty = (-3026);
      prof0.returnDoc("");
      assertTrue(prof0.canBorrow());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Prof prof0 = new Prof("/qD\"Gq{");
      prof0.penalty = 44;
      Book book0 = new Book("/qD\"Gq{", 0);
      prof0.borrow(book0);

      try {
          prof0.extend("/qD\"Gq{");
          fail("Expecting exception: IndexOutOfBoundsException");

      } catch(IndexOutOfBoundsException e) {
          //
          // cant extend (because of extend of borrowedOn date)
          //
          verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Prof prof0 = new Prof("");
      Stack<Document> stack0 = new Stack<Document>();
      prof0.docsBorrow = (List<Document>) stack0;
      Magazine magazine0 = new Magazine("", 1073741823, (-1), (-1));
      stack0.add((Document) magazine0);
      prof0.penalty = (-4071);
      // Undeclared exception!
      try { 
        prof0.extend("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Prof prof0 = new Prof("cant extend");
      assertEquals(0, prof0.getPenalty());
      
      prof0.penalty = 1;
      int int0 = prof0.getPenalty();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Prof prof0 = new Prof("");
      prof0.penalty = (-1877);
      int int0 = prof0.getPenalty();
      assertEquals((-1877), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Prof prof0 = new Prof((String) null);
      prof0.getName();
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Prof prof0 = new Prof("");
      String string0 = prof0.getName();
      assertNotNull(string0);
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Prof prof0 = new Prof("");
      prof0.canBorrow();
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student("", "2vtmY7odbP5M/I");
      Reference reference0 = new Reference("(", 0);
      student0.borrow(reference0);
      student0.borrow(reference0);
      boolean boolean0 = student0.canBorrow();
      assertFalse(student0.canBorrow());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student(", defaultValue=", "cant extend");
      Stack<Integer> stack0 = new Stack<Integer>();
      student0.dayBorrow = (List<Integer>) stack0;
      stack0.add((Integer) null);
      // Undeclared exception!
      try { 
        student0.timePass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Prof prof0 = new Prof("o)ye3lF");
      Stack<Integer> stack0 = new Stack<Integer>();
      Vector<Document> vector0 = new Vector<Document>();
      Integer integer0 = new Integer((-60));
      stack0.add(integer0);
      prof0.docsBorrow = (List<Document>) vector0;
      prof0.dayBorrow = (List<Integer>) stack0;
      // Undeclared exception!
      try { 
        prof0.timePass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Prof prof0 = new Prof("");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      prof0.docsBorrow = (List<Document>) linkedList0;
      Book book0 = new Book("", 0);
      linkedList0.add((Document) book0);
      // Undeclared exception!
      try { 
        prof0.returnDoc("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Student student0 = new Student(":2-$v@0i4`iGp", "");
      Magazine magazine0 = new Magazine((String) null, 0, 1023, 0);
      magazine0.title = "";
      student0.borrow(magazine0);
      Vector<Boolean> vector0 = new Vector<Boolean>();
      student0.canExtend = (List<Boolean>) vector0;
      // Undeclared exception!
      try { 
        student0.returnDoc("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Student student0 = new Student("", "+a(=");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      student0.docsBorrow = (List<Document>) linkedList0;
      linkedList0.add((Document) null);
      // Undeclared exception!
      try { 
        student0.extend("BloomFilters must have equal funnels (%s != %s)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Student student0 = new Student("25&,", "4lElhj$");
      Magazine magazine0 = new Magazine("25&,", (-1560112687), 943, 943);
      student0.borrow(magazine0);
      Vector<Boolean> vector0 = new Vector<Boolean>();
      student0.canExtend = (List<Boolean>) vector0;
      // Undeclared exception!
      try { 
        student0.extend("25&,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Prof prof0 = new Prof("cant extend");
      // Undeclared exception!
      try { 
        prof0.borrow((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Prof prof0 = new Prof("");
      Vector<Integer> vector0 = new Vector<Integer>();
      prof0.dayBorrow = (List<Integer>) vector0;
      Integer integer0 = new Integer(0);
      vector0.add(integer0);
      // Undeclared exception!
      try { 
        prof0.timePass();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Student student0 = new Student(":2-$v@0i4`iGp", "");
      Magazine magazine0 = new Magazine((String) null, 0, 1023, 0);
      magazine0.title = "";
      student0.borrow(magazine0);
      assertTrue(student0.canBorrow());
      
      student0.returnDoc("1B6\"B");
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Student student0 = new Student(":2-$v@0i4`iGp", "");
      Magazine magazine0 = new Magazine((String) null, 0, 1023, 0);
      student0.borrow(magazine0);
      // Undeclared exception!
      try { 
        student0.returnDoc("1B6\"B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Prof prof0 = new Prof("ir.ramtung.impl2.Person");
      Magazine magazine0 = new Magazine("[S0qcjX$E7Z>", 22, 22, 22);
      prof0.borrow(magazine0);
      try { 
        prof0.extend("ir.ramtung.impl2.Person");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cant extend
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Prof prof0 = new Prof("cant extend");
      Book book0 = new Book("cant extend", (-62));
      prof0.borrow(book0);
      prof0.extend("cant extend");
      prof0.extend("cant extend");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Prof prof0 = new Prof("cant extend");
      String string0 = prof0.getName();
      assertNotNull(string0);
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Prof prof0 = new Prof("SUs=K[tViTIVeH+U*0z");
      int int0 = prof0.getPenalty();
      assertEquals(0, int0);
  }
}
