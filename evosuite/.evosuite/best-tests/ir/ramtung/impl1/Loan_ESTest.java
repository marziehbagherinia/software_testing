/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 12 20:09:03 GMT 2024
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Book;
import ir.ramtung.impl1.Document;
import ir.ramtung.impl1.Loan;
import ir.ramtung.impl1.Magazine;
import ir.ramtung.impl1.Member;
import ir.ramtung.impl1.Professor;
import ir.ramtung.impl1.Reference;
import ir.ramtung.impl1.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.impl1.CannotExtendEx");
      Magazine magazine0 = new Magazine("ir.ramtung.impl1.CannotExtendEx", 2, 2);
      Loan loan0 = new Loan(professor0, magazine0, 0);
      int int0 = loan0.getPenalty(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Professor professor0 = new Professor((String) null);
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, (-20));
      loan0.extend((-3585));
      loan0.return_(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reference reference0 = new Reference("ir.ramtung.impl1.Student");
      Student student0 = new Student("ir.ramtung.impl1.CannotExtendEx", "ir.ramtung.impl1.Reference");
      Loan loan0 = new Loan(student0, reference0, 0);
      loan0.extend(5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Professor professor0 = new Professor("bOS^yG~");
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 1);
      int int0 = loan0.getPenalty(7000);
      assertEquals(34896000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Professor professor0 = new Professor("bOS^yG~");
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 1);
      int int0 = loan0.getPenalty(11012000);
      assertEquals((-774678848), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.impl1.Student");
      Book book0 = new Book("Invalid argument to loan constructor");
      Loan loan0 = new Loan(professor0, book0, 42000);
      int int0 = loan0.getPenalty(42000);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Professor professor0 = new Professor("bOS^yG~");
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 1);
      loan0.return_(1390);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Professor professor0 = new Professor((String) null);
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 2112);
      loan0.return_(2112);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Professor professor0 = new Professor((String) null);
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 2112);
      loan0.extend(0);
      loan0.extend((-1150));
      try { 
        loan0.extend(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Already extended twice
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student("ir.ramtuKg.mpl1.Invalid rgum0ntEx", "ir.ramtuKg.mpl1.Invalid rgum0ntEx");
      Book book0 = new Book("ir.ramtuKg.mpl1.Invalid rgum0ntEx");
      Loan loan0 = new Loan(student0, book0, (-2900));
      try { 
        loan0.extend(5010);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend a late loan
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Professor professor0 = new Professor("bOS^yG~");
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 1);
      try { 
        loan0.extend(1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Professor professor0 = new Professor("bOS^yG~");
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 1);
      boolean boolean0 = loan0.isBy(professor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student("ir.ramtuKg.mpl1.Invalid rgum0ntEx", "ir.ramtuKg.mpl1.Invalid rgum0ntEx");
      Book book0 = new Book("ir.ramtuKg.mpl1.Invalid rgum0ntEx");
      Loan loan0 = new Loan(student0, book0, (-2900));
      Professor professor0 = new Professor("ir.ramtuKg.mpl1.Invalid rgum0ntEx");
      boolean boolean0 = loan0.isBy(professor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Professor professor0 = new Professor("bOS^yG~");
      Book book0 = new Book((String) null);
      Loan loan0 = new Loan(professor0, book0, 1);
      boolean boolean0 = loan0.isFor(book0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Professor professor0 = new Professor("s");
      Reference reference0 = new Reference("s");
      Loan loan0 = new Loan(professor0, reference0, 501);
      Reference reference1 = new Reference("s");
      boolean boolean0 = loan0.isFor(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Professor professor0 = new Professor(",~2sk@m99}$\"Mzz./");
      Loan loan0 = null;
      try {
        loan0 = new Loan(professor0, (Document) null, 0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Book book0 = new Book("Xd4,}C&V:>$X9k[");
      Loan loan0 = null;
      try {
        loan0 = new Loan((Member) null, book0, 22);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }
}
